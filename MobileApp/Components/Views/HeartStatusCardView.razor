<button class="w-full h-22 bg-[@hexColor] rounded-md py-3 ps-4 pe-4 mb-2 shadow-sm" @onclick="OnSimulateClick">
    <div class="flex justify-between">
        <div>
            <h1 class="text-black font-extrabold text-2xl">@status</h1>
            <p class="text-accent font-medium text-sm">@information</p>
        </div>
        <img class="w-16 h-auto object-cover items-start" src="@imageSource" alt="Status Icon" />
    </div>
</button>

@code {

    private string hexColor = string.Empty;
    private string status = string.Empty;
    private string information = string.Empty;
    private string imageSource = string.Empty;
    private Timer? _Timer;

    [Parameter]
    public EventCallback<MouseEventArgs> OnSimulate { get; set; }

    protected override void OnInitialized()
    {
        _Timer = new Timer(3000);
        _Timer.Elapsed += UpdateHeartStatus;
        _Timer.AutoReset = true;
        _Timer.Start();
    }

    private async void UpdateHeartStatus(object? sender, ElapsedEventArgs e)
    {
        _Timer?.Stop();

        status = App.HeartMonitor.HeartCondition;

        if (status == "Healthy Heart")
        {
            hexColor = "#B9FBC0";
            information = string.Empty;
            imageSource = $"../resources/images/healthy_heart_icon.png";
        }
        else if (status == "STEMI" || status == "NSTEMI")
        {
            hexColor = "#FBB9B9";
            information = "Calling Ambulance...";
            imageSource = $"../resources/images/emergency_icon.png";
        }
        else
        {
            status = "Unknown";
            hexColor = "#F4F4F4";
            information = string.Empty;
            imageSource = $"../resources/images/unknown_icon.png";
        }

        await InvokeAsync(StateHasChanged);
        _Timer?.Start();
    }

    public void Dispose()
    {
        _Timer?.Stop();
        _Timer?.Dispose();
    }

    private async Task OnSimulateClick(MouseEventArgs e)
    {
        if (OnSimulate.HasDelegate)
        {
            await OnSimulate.InvokeAsync(e);
        }
    }
}