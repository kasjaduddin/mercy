@using System
@using Microsoft.AspNetCore.Components.Forms

<div class="w-full pt-1">
    <label for="@Id" class="block text-lg font-normal mb-[2px]">@Label</label>
    <input 
        id="@Id"
        type="@Type"
        class="w-full px-2 py-1 border-[1.5px] border-black rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        placeholder="@Placeholder"
        value="@Value"
        @onchange="@OnChangeHandler"
        disabled="@Disabled" />
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="text-red-500 mt-1 text-sm">@ErrorMessage</div>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; } = Guid.NewGuid().ToString();

    [Parameter]
    public string Label { get; set; } = "Field";

    [Parameter]
    public string Type { get; set; } = "text";

    [Parameter]
    public string Placeholder { get; set; } = "";

    [Parameter]
    public string Value { get; set; } = "";

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public string ErrorMessage { get; set; } = "";

    [Parameter]
    public EventCallback<ChangeEventArgs> OnChange { get; set; }

    private async Task OnChangeHandler(ChangeEventArgs e)
    {
        Value = e.Value?.ToString() ?? "";
        if (OnChange.HasDelegate)
        {
            await OnChange.InvokeAsync(e);
        }
    }
}